1、answer： Horner's method
Here's a Python implementation of a hash function that uses Horner's method to compute the hash value based on the Unicode code of characters in the input string. 
The base and mod values can be adjusted as parameters to the function:

def horner_hash(key, base, mod):
    hash_value = 0
    for char in key:
        # Use Unicode code point of the character
        code_point = ord(char)  # Get Unicode code point of the character
        hash_value = (hash_value * base + code_point) % mod
    return hash_value


# Example usage
key = "hello"                       # Input key
base = 33                           # Base value (can be adjusted)
mod = 10000019                      # Mod value (can be adjusted)
index = horner_hash(key, base, mod)
print("Index:", index)

[Comment]: 
In this implementation, the horner_hash function takes a key (input string), base, and mod as parameters. 
It iterates through each character in the input string, computes the Unicode code point, and uses Horner's method to calculate the hash value. 
Finally, it returns the computed hash value as the index. 
Adjusting the base and mod parameters allows flexibility in tuning the hash function for different use cases.